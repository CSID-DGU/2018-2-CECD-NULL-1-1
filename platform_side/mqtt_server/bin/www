#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mqtt-server:server');

var mosca = require('mosca');
/**
 * Get port from environment and store in Express.
 */

var settings = {
  port: 1883,
};

var server = new mosca.Server(settings, function() {
  console.log('Mosca server is up and running')
});

server.on('clientConnected', function(client) {
  console.log('Client Connected:', client.id);
});
  
  // fired when a client disconnects
server.on('clientDisconnected', function(client) {
  console.log('Client Disconnected:', client.id);
});

server.on('published', function(packet, client) {
  console.log('Published', packet);
  console.log('Client', client);
});

// server.published = function(packet, client, cb) {

//   if (packet.topic.indexOf('echo') === 0) {
//     console.log('ON PUBLISHED', packet.payload.toString(), 'on topic', packet.topic);
//     console.log('@ ',cb());
//     return cb();
//   }

//   var newPacket = {
//     topic: 'echo/' + packet.topic,
//     payload: packet.payload,
//     retain: packet.retain,
//     qos: packet.qos
//   };

//   console.log('newPacket', newPacket);
//   console.log('@ ',cb);
//   server.publish(newPacket, cb);
// };

// var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

// /**
//  * Create HTTP server.
//  */

// var server = http.createServer(app);

// /**
//  * Listen on provided port, on all network interfaces.
//  */

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
